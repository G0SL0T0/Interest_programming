import disnake
from disnake.ext import commands, tasks
from disnake.ui import View, Select
import json
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = disnake.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# –≠–∫–æ–Ω–æ–º–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
if not os.path.exists("economy.json"):
    with open("economy.json", "w") as f:
        json.dump({}, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_balance(user_id):
    with open("economy.json", "r") as f:
        economy = json.load(f)
    return economy.get(str(user_id), 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    with open("economy.json", "r") as f:
        economy = json.load(f)
    economy[str(user_id)] = economy.get(str(user_id), 0) + amount
    with open("economy.json", "w") as f:
        json.dump(economy, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π
def filter_roles(roles):
    filtered_roles = []
    for role in roles:
        if any(char in role.name for char in ["üçå", "üçç", "ü•ù", "üê±", "üç∫", "üçä", "üçÜ", "ü••"]):
            filtered_roles.append(role.name)
    return filtered_roles

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
class MainMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π
        self.add_item(FunctionSelect())

# –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π
class FunctionSelect(Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", description="–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", emoji="üõ†Ô∏è"),
            disnake.SelectOption(label="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", description="–ò–≥—Ä—ã –∏ —à—É—Ç–∫–∏", emoji="üéÆ"),
            disnake.SelectOption(label="–£—Ç–∏–ª–∏—Ç—ã", description="–ü–æ–≥–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥", emoji="üîß"),
            disnake.SelectOption(label="–ú—É–∑—ã–∫–∞", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏", emoji="üéµ"),
            disnake.SelectOption(label="–≠–∫–æ–Ω–æ–º–∏–∫–∞", description="–ë–∞–ª–∞–Ω—Å –∏ –º–∞–≥–∞–∑–∏–Ω", emoji="üí∞"),
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", options=options, custom_id="function_select")

    async def callback(self, interaction: disnake.Interaction):
        selected_function = self.values[0]
        if selected_function == "–ú–æ–¥–µ—Ä–∞—Ü–∏—è":
            await interaction.response.edit_message(view=ModerationMenu())
        elif selected_function == "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è":
            await interaction.response.edit_message(view=FunMenu())
        elif selected_function == "–£—Ç–∏–ª–∏—Ç—ã":
            await interaction.response.edit_message(view=UtilitiesMenu())
        elif selected_function == "–ú—É–∑—ã–∫–∞":
            await interaction.response.edit_message(view=MusicMenu())
        elif selected_function == "–≠–∫–æ–Ω–æ–º–∏–∫–∞":
            await interaction.response.edit_message(view=EconomyMenu())

# –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
class ModerationMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.add_item(ModerationSelect())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
class ModerationSelect(Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–ë–∞–Ω", description="–ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", emoji="üî®"),
            disnake.SelectOption(label="–ö–∏–∫", description="–ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", emoji="üë¢"),
            disnake.SelectOption(label="–û—á–∏—Å—Ç–∫–∞", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", emoji="üßπ"),
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", options=options, custom_id="moderation_select")

    async def callback(self, interaction: disnake.Interaction):
        selected_action = self.values[0]
        if selected_action == "–ë–∞–Ω":
            await interaction.response.send_modal(modal=BanModal())
        elif selected_action == "–ö–∏–∫":
            await interaction.response.send_modal(modal=KickModal())
        elif selected_action == "–û—á–∏—Å—Ç–∫–∞":
            await interaction.response.send_modal(modal=ClearModal())

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–∞–Ω–∞
class BanModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–£—á–∞—Å—Ç–Ω–∏–∫",
                placeholder="–£–∫–∞–∂–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫–∞",
                custom_id="member",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
            disnake.ui.TextInput(
                label="–ü—Ä–∏—á–∏–Ω–∞",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
                custom_id="reason",
                style=disnake.TextInputStyle.paragraph,
                required=False,
            ),
        ]
        super().__init__(title="–ë–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞", components=components, custom_id="ban_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        member = interaction.text_values["member"]
        reason = interaction.text_values["reason"]
        await interaction.guild.ban(member, reason=reason)
        await interaction.response.send_message(f"{member} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.", ephemeral=True)

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–∏–∫–∞
class KickModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–£—á–∞—Å—Ç–Ω–∏–∫",
                placeholder="–£–∫–∞–∂–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫–∞",
                custom_id="member",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
            disnake.ui.TextInput(
                label="–ü—Ä–∏—á–∏–Ω–∞",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
                custom_id="reason",
                style=disnake.TextInputStyle.paragraph,
                required=False,
            ),
        ]
        super().__init__(title="–ö–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞", components=components, custom_id="kick_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        member = interaction.text_values["member"]
        reason = interaction.text_values["reason"]
        await interaction.guild.kick(member, reason=reason)
        await interaction.response.send_message(f"{member} –±—ã–ª –∫–∏–∫–Ω—É—Ç.", ephemeral=True)

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
class ClearModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
                custom_id="amount",
                style=disnake.TextInputStyle.short,
                max_length=10,
            ),
        ]
        super().__init__(title="–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", components=components, custom_id="clear_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        amount = int(interaction.text_values["amount"])
        await interaction.channel.purge(limit=amount + 1)
        await interaction.response.send_message(f"–£–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π.", ephemeral=True)

# –ú–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
class FunMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
        self.add_item(FunSelect())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
class FunSelect(Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", description="–°—ã–≥—Ä–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", emoji="üé≤"),
            disnake.SelectOption(label="–®—É—Ç–∫–∞", description="–ü–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É", emoji="üòÇ"),
            disnake.SelectOption(label="–ó–∞–±—É–ª–∏—Ç—å", description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É", emoji="üéÆ"),
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", options=options, custom_id="fun_select")

    async def callback(self, interaction: disnake.Interaction):
        selected_fun = self.values[0]
        if selected_fun == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
            await interaction.response.send_message("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞!", ephemeral=True)
        elif selected_fun == "–®—É—Ç–∫–∞":
            jokes = [
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –¢–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤.",
            ]
            await interaction.response.send_message(random.choice(jokes))
        elif selected_fun == "–ó–∞–±—É–ª–∏—Ç—å":
            games = [
                "üé≤ –°—ã–≥—Ä–∞–µ–º –≤ –∫–æ—Å—Ç–∏?",
                "üéØ –°—ã–≥—Ä–∞–µ–º –≤ –¥–∞—Ä—Ç—Å?",
                "üÉè –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞—Ä—Ç—ã?",
                "üéÆ –°—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?",
            ]
            game = random.choice(games)
            await interaction.response.send_message(f"{interaction.author.mention} {game}")

# –ú–µ–Ω—é —É—Ç–∏–ª–∏—Ç
class UtilitiesMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ç–∏–ª–∏—Ç
        self.add_item(UtilitiesSelect())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ç–∏–ª–∏—Ç
class UtilitiesSelect(Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–ü–æ–≥–æ–¥–∞", description="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", emoji="üå§Ô∏è"),
            disnake.SelectOption(label="–ü–µ—Ä–µ–≤–æ–¥", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", emoji="üåç"),
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–∏–ª–∏—Ç—É", options=options, custom_id="utilities_select")

    async def callback(self, interaction: disnake.Interaction):
        selected_utility = self.values[0]
        if selected_utility == "–ü–æ–≥–æ–¥–∞":
            await interaction.response.send_modal(modal=WeatherModal())
        elif selected_utility == "–ü–µ—Ä–µ–≤–æ–¥":
            await interaction.response.send_modal(modal=TranslateModal())

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–≥–æ–¥—ã
class WeatherModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ì–æ—Ä–æ–¥",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥",
                custom_id="city",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
        ]
        super().__init__(title="–ü–æ–≥–æ–¥–∞", components=components, custom_id="weather_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        city = interaction.text_values["city"]
        api_key = ""
        url = 