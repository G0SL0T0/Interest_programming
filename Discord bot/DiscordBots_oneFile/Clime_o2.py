import disnake
from disnake.ext import commands, tasks
from disnake.ui import Button, View, Select
import random
import json
import os
import requests
import youtube_dl
from disnake import FFmpegPCMAudio
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è youtube_dl
ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
intents = disnake.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# –≠–∫–æ–Ω–æ–º–∏–∫–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
if not os.path.exists("economy.json"):
    with open("economy.json", "w") as f:
        json.dump({}, f)

# –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π
roles_shop = {
    "–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü": {"price": 100, "emoji": "üü¢"},
    "–†—è–¥–æ–≤–æ–π": {"price": 300, "emoji": "üü°"},
    "–ú–ª–∞–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç": {"price": 600, "emoji": "üîµ"},
    "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": {"price": 1000, "emoji": "üî¥"},
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_balance(user_id):
    with open("economy.json", "r") as f:
        economy = json.load(f)
    return economy.get(str(user_id), 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    with open("economy.json", "r") as f:
        economy = json.load(f)
    economy[str(user_id)] = economy.get(str(user_id), 0) + amount
    with open("economy.json", "w") as f:
        json.dump(economy, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–ª–µ–π
def filter_roles(roles):
    filtered_roles = []
    for role in roles:
        if any(char in role.name for char in ["üçå", "üçç", "ü•ù", "üê±", "üç∫", "üçä", "üçÜ", "ü••"]):
            filtered_roles.append(role.name)
    return filtered_roles

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
class MainMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", style=disnake.ButtonStyle.primary)
    async def moderation_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=ModerationMenu())

    @disnake.ui.button(label="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", style=disnake.ButtonStyle.success)
    async def fun_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=FunMenu())

    @disnake.ui.button(label="–£—Ç–∏–ª–∏—Ç—ã", style=disnake.ButtonStyle.secondary)
    async def utilities_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=UtilitiesMenu())

    @disnake.ui.button(label="–ú—É–∑—ã–∫–∞", style=disnake.ButtonStyle.danger)
    async def music_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MusicMenu())

    @disnake.ui.button(label="–≠–∫–æ–Ω–æ–º–∏–∫–∞", style=disnake.ButtonStyle.green)
    async def economy_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=EconomyMenu())

# –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
class ModerationMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ë–∞–Ω", style=disnake.ButtonStyle.danger)
    async def ban_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.send_modal(modal=BanModal())

    @disnake.ui.button(label="–ö–∏–∫", style=disnake.ButtonStyle.danger)
    async def kick_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.send_modal(modal=KickModal())

    @disnake.ui.button(label="–û—á–∏—Å—Ç–∫–∞", style=disnake.ButtonStyle.primary)
    async def clear_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.send_modal(modal=ClearModal())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–∞–Ω–∞
class BanModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–£—á–∞—Å—Ç–Ω–∏–∫",
                placeholder="–£–∫–∞–∂–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫–∞",
                custom_id="member",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
            disnake.ui.TextInput(
                label="–ü—Ä–∏—á–∏–Ω–∞",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
                custom_id="reason",
                style=disnake.TextInputStyle.paragraph,
                required=False,
            ),
        ]
        super().__init__(title="–ë–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞", components=components, custom_id="ban_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        member = interaction.text_values["member"]
        reason = interaction.text_values["reason"]
        await interaction.guild.ban(member, reason=reason)
        await interaction.response.send_message(f"{member} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.", ephemeral=True)

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–∏–∫–∞
class KickModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–£—á–∞—Å—Ç–Ω–∏–∫",
                placeholder="–£–∫–∞–∂–∏—Ç–µ @—É—á–∞—Å—Ç–Ω–∏–∫–∞",
                custom_id="member",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
            disnake.ui.TextInput(
                label="–ü—Ä–∏—á–∏–Ω–∞",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É",
                custom_id="reason",
                style=disnake.TextInputStyle.paragraph,
                required=False,
            ),
        ]
        super().__init__(title="–ö–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞", components=components, custom_id="kick_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        member = interaction.text_values["member"]
        reason = interaction.text_values["reason"]
        await interaction.guild.kick(member, reason=reason)
        await interaction.response.send_message(f"{member} –±—ã–ª –∫–∏–∫–Ω—É—Ç.", ephemeral=True)

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
class ClearModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
                custom_id="amount",
                style=disnake.TextInputStyle.short,
                max_length=10,
            ),
        ]
        super().__init__(title="–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", components=components, custom_id="clear_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        amount = int(interaction.text_values["amount"])
        await interaction.channel.purge(limit=amount + 1)
        await interaction.response.send_message(f"–£–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π.", ephemeral=True)

# –ú–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
class FunMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", style=disnake.ButtonStyle.success)
    async def quiz_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        questions = [
            {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "answer": "8"},
            {"question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?", "answer": "–¢–æ–ª—Å—Ç–æ–π"},
        ]
        question = random.choice(questions)
        await interaction.response.send_message(f"–í–æ–ø—Ä–æ—Å: {question['question']}")

        def check(m):
            return m.author == interaction.author and m.channel == interaction.channel

        try:
            msg = await bot.wait_for("message", timeout=10.0, check=check)
        except disnake.TimeoutError:
            await interaction.followup.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ!")
        else:
            if msg.content.lower() == question["answer"].lower():
                await interaction.followup.send("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                await interaction.followup.send(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")

    @disnake.ui.button(label="–®—É—Ç–∫–∞", style=disnake.ButtonStyle.success)
    async def joke_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –¢–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤.",
        ]
        await interaction.response.send_message(random.choice(jokes))

    @disnake.ui.button(label="–ó–∞–±—É–ª–∏—Ç—å", style=disnake.ButtonStyle.success)
    async def zabul_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        games = [
            "üé≤ –°—ã–≥—Ä–∞–µ–º –≤ –∫–æ—Å—Ç–∏?",
            "üéØ –°—ã–≥—Ä–∞–µ–º –≤ –¥–∞—Ä—Ç—Å?",
            "üÉè –°—ã–≥—Ä–∞–µ–º –≤ –∫–∞—Ä—Ç—ã?",
            "üéÆ –°—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?",
        ]
        game = random.choice(games)
        await interaction.response.send_message(f"{interaction.author.mention} {game}")

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –ú–µ–Ω—é —É—Ç–∏–ª–∏—Ç
class UtilitiesMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ü–æ–≥–æ–¥–∞", style=disnake.ButtonStyle.secondary)
    async def weather_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.send_modal(modal=WeatherModal())

    @disnake.ui.button(label="–ü–µ—Ä–µ–≤–æ–¥", style=disnake.ButtonStyle.secondary)
    async def translate_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.send_modal(modal=TranslateModal())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–≥–æ–¥—ã
class WeatherModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ì–æ—Ä–æ–¥",
                placeholder="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥",
                custom_id="city",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
        ]
        super().__init__(title="–ü–æ–≥–æ–¥–∞", components=components, custom_id="weather_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        city = interaction.text_values["city"]
        api_key = "YOUR_OPENWEATHERMAP_API_KEY"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
        response = requests.get(url).json()

        if response.get("cod") != 200:
            await interaction.response.send_message("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        weather_data = response["weather"][0]["description"]
        temperature = response["main"]["temp"]
        await interaction.response.send_message(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather_data}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C")

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
class TranslateModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–¢–µ–∫—Å—Ç",
                placeholder="–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
                custom_id="text",
                style=disnake.TextInputStyle.paragraph,
                max_length=500,
            ),
            disnake.ui.TextInput(
                label="–Ø–∑—ã–∫",
                placeholder="–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru')",
                custom_id="lang",
                style=disnake.TextInputStyle.short,
                max_length=10,
            ),
        ]
        super().__init__(title="–ü–µ—Ä–µ–≤–æ–¥", components=components, custom_id="translate_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        text = interaction.text_values["text"]
        lang = interaction.text_values["lang"]
        url = f"https://api.mymemory.translated.net/get?q={text}&langpair=en|{lang}"
        response = requests.get(url).json()
        translation = response["responseData"]["translatedText"]
        await interaction.response.send_message(f"–ü–µ—Ä–µ–≤–æ–¥: {translation}")

# –ú–µ–Ω—é –º—É–∑—ã–∫–∏
class MusicMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", style=disnake.ButtonStyle.danger)
    async def play_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.send_modal(modal=PlayModal())

    @disnake.ui.button(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", style=disnake.ButtonStyle.danger)
    async def stop_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        voice_client = interaction.guild.voice_client
        if voice_client.is_playing():
            voice_client.stop()
            await interaction.response.send_message("–ú—É–∑—ã–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("–ú—É–∑—ã–∫–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.", ephemeral=True)

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏
class PlayModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–°—Å—ã–ª–∫–∞",
                placeholder="–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube",
                custom_id="url",
                style=disnake.TextInputStyle.short,
                max_length=100,
            ),
        ]
        super().__init__(title="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É", components=components, custom_id="play_modal")

    async def callback(self, interaction: disnake.ModalInteraction):
        url = interaction.text_values["url"]
        voice_channel = interaction.author.voice.channel
        if not voice_channel:
            await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!", ephemeral=True)
            return

        voice_client = await voice_channel.connect()
        with youtube_dl.YoutubeDL(ytdl_format_options) as ydl:
            info = ydl.extract_info(url, download=False)
            url2 = info['formats'][0]['url']
            voice_client.play(FFmpegPCMAudio(url2))
        await interaction.response.send_message("–ú—É–∑—ã–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è...")

# –ú–µ–Ω—é —ç–∫–æ–Ω–æ–º–∏–∫–∏
class EconomyMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ë–∞–ª–∞–Ω—Å", style=disnake.ButtonStyle.green)
    async def balance_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        user_id = str(interaction.author.id)
        balance = get_balance(user_id)
        await interaction.response.send_message(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.", ephemeral=True)

    @disnake.ui.button(label="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", style=disnake.ButtonStyle.green)
    async def daily_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        user_id = str(interaction.author.id)
        update_balance(user_id, 100)
        await interaction.response.send_message("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –º–æ–Ω–µ—Ç!", ephemeral=True)

    @disnake.ui.button(label="–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", style=disnake.ButtonStyle.green)
    async def shop_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=RoleShopMenu())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=MainMenu())

# –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π
class RoleShopMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

        # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        self.add_item(RoleSelect())

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.secondary)
    async def back_button(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        await interaction.response.edit_message(view=EconomyMenu())

# –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
class RoleSelect(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label=role, description=f"–¶–µ–Ω–∞: {details['price']} –º–æ–Ω–µ—Ç", emoji=details["emoji"])
            for role, details in roles_shop.items()
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", options=options, custom_id="role_select")

    async def callback(self, interaction: disnake.Interaction):
        selected_role = self.values[0]
        user = interaction.author
        user_roles = [role.name for role in user.roles]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ä–æ–ª—å
        if selected_role in user_roles:
            await interaction.response.send_message("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å.", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        price = roles_shop[selected_role]["price"]
        balance = get_balance(user.id)
        if balance < price:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.", ephemeral=True)
            return

        # –ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–∏
        update_balance(user.id, -price)
        role = disnake.utils.get(interaction.guild.roles, name=selected_role)
        await user.add_roles(role)
        await interaction.response.send_message(f"–í—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {selected_role}!", ephemeral=True)

# –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ /menu
@bot.slash_command(name="menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def menu(interaction: disnake.ApplicationCommandInteraction):
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = interaction.author
    join_date = user.joined_at.strftime("%d.%m.%Y")
    roles = filter_roles(user.roles)
    balance = get_balance(user.id)

    user_info = (
        f"**–ò–Ω—Ñ–æ {user.display_name}**\n"
        f"–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {join_date}\n"
        f"–ó–≤–∞–Ω–∏–µ:\n"
        "{\n"
        + "\n".join([f"{role}" for role in roles]) +
        "\n}\n"
        f"**–ë–∞–ª–∞–Ω—Å:** {balance} –º–æ–Ω–µ—Ç\n"
    )

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    bot_info = (
        f"ü§ñ **{bot.user.name}**\n"
        f"–°–µ—Ä–≤–µ—Ä: {interaction.guild.name}\n"
        "**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
        "- **–ú–æ–¥–µ—Ä–∞—Ü–∏—è**: –ë–∞–Ω, –∫–∏–∫, –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "- **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è**: –í–∏–∫—Ç–æ—Ä–∏–Ω—ã, —à—É—Ç–∫–∏, –∏–≥—Ä—ã.\n"
        "- **–£—Ç–∏–ª–∏—Ç—ã**: –ü–æ–≥–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥.\n"
        "- **–ú—É–∑—ã–∫–∞**: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤.\n"
        "- **–≠–∫–æ–Ω–æ–º–∏–∫–∞**: –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞, –º–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π.\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    embed = disnake.Embed(title="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=disnake.Color.blue())
    embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", value=user_info, inline=False)
    embed.add_field(name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", value=bot_info, inline=False)
    await interaction.response.send_message(embed=embed, view=MainMenu())

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user_id = str(message.author.id)
    today = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è
    with open("economy.json", "r") as f:
        economy = json.load(f)

    if economy.get(user_id, {}).get("last_message_date") != today:
        update_balance(user_id, 50)
        economy[user_id]["last_message_date"] = today
        with open("economy.json", "w") as f:
            json.dump(economy, f)
        await message.channel.send(f"{message.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 50 –º–æ–Ω–µ—Ç –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!")

    await bot.process_commands(message)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–µ—Ä–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    user_id = str(user.id)
    today = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è
    with open("economy.json", "r") as f:
        economy = json.load(f)

    if economy.get(user_id, {}).get("last_reaction_date") != today:
        update_balance(user_id, 30)
        economy[user_id]["last_reaction_date"] = today
        with open("economy.json", "w") as f:
            json.dump(economy, f)
        await reaction.message.channel.send(f"{user.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 30 –º–æ–Ω–µ—Ç –∑–∞ –ø–µ—Ä–≤—É—é —Ä–µ–∞–∫—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è!")

# –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run("=")